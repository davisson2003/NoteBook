1. processes provide two virtualizations: 
  * a virtualized processor
  * a virtual memory
2. fork() 
  * return froms from the kernel twice: child pid for parent, 0 for child.
  * actually implemented via clone() system call.

3. exit()
  * terminates the process and free all its resources.
  * parents can inquire about the status of terminated child via wait4().
  * when process exits, it is placed into a special zombie state until the parents call wait() or waitpid().

4. linux kernel refers to task as process.

5. task list: 
  * circular doubly linked list. element is process descriptor.(struct task_struct).<linux/sched.h>. it contais all info about a process.

6. task_struct (process descriptor)
  * a huge struct.
  * contains process info like: process's addr space; pending signals; process state, pid, prio etc.  see src of task_struct in linux/sched.h
  * allocated in kernal with slab allocator.
  * inside kernel, process are referenced directly by a ptr to task_struct.
  * most of process change are directly implenmented by modify its task_struct.
  * how to get the current task_struct is depend on arch. 
    ** x86 using the rule that thread_info is on the top of the stack.
       so it calculated the task_struct with masking the least 13 bits
       of stack pointer to get thread_info and then get task_struct.
       (see Fig 3.2 at page 26 in LKD).
    ** PPC use one register to point to current task_struct directly.

7. thread_info. (contain task_struct)
  * live at the bottom(/top) of the stack.
  * the task_struct actually points to the task_struct.

8. pid:
  * default maximum value is 32768. will wrap around if reach.
  * can change by modify /proc/sys/kernel/pid_max.

9. process state:
  * TASK_RUNNING: 
     either running or in the runqueue waiting to run.
     only possible state for user-space executing process.
  * TASK_INTERRUPTIBLE:
     sleeping, wait for some condition to exist, or a signal.
  * TASK_UNINTERRUPTIBLE: 
     sleeping, wait for some condition to exist. but not a signal.
  * TASK_ZOMBIE:
     terminated, but parent not issued wait4(). so task_struct must remain
     in case the parent access it. 
     after parent issued wait4(), task_struct is deallocated.
  * TASK_STOPPEDï¼š
     Processes are stoped by SIGSTOP, SIGTSTP, SIGTTIN, SIGTTOU. 
 
  ** set_task_state(task, state) to set the tast state. 
     there will be memory arrier to force ordering on processors.

10. process context:
  process running in user-space can change to run into kernel-space only
  through system calls or exception handler. and the kernel is said to 
  "execute on behalf of the process" and is in process context.

11. Process Family Tree:
  * init(init_task) process pid = 1. the first process after boot, created at the last
  step of boot process. all processes are decendentsfrom init. 
  * each task_struct->parent point to parent's task_struct. 
  * task_struct->children is a list of children task_struct.
  * iterate over a process's children:
    struct task_struct *task;
    struct list_head* list;
    list_for_each(list, &current->children) {
      task = list_entry(list, struct tast_struct, sibling)
      // task now point to process's one child.
    }
  * for_each_process(task) task will iterate all process in system.

12. process creation:
    * fork(): 
      ** copy of parent, except PID, PPID, pending signals etc
      ** implemented via clone() system call, 
         and clone() calls do_fork(). (kernel/fork.c)
         do_fork() calls copy_process()
         *** copy_process calls dup_task_struct(): create new kernel stack, thread_info and task_struct. the child and parent task_struct are same. 
          **** then it checks whether the new child will not exceed the resource limits on the number of processes for current user.
          **** then child differentiate itself from its parent, various members of task_struct are cleared or set to initial value. the bulk of data in task_struct are shared.
          **** child state set to TASK_UNINTERRUPTIBLE to ensure it doesn't yet run.
          **** calls copy_flags() to update the flags of tast_struct. PF_SUPERPRIV (super privileges) cleared, PF_FORKNONEXEC is set (forked but not exec())
          **** get_pid() to assign an available PID
          **** Depending on the flags passed to clone(), copy_process() then either duplicate or share open files, filesystem info, signal handlers, process address space, and namespace. (shared between threads, but dup for processes.)
          **** Time slice between parent and child is split between the two.
          **** return the ptr to new task.
      ** do_fork() will run the child. kernel first run child and then parent, this eliminate the copy-on-write overhead because child usually call exec() immediately.

    * vfork() is same as fork(), except that pagetable entries are not copied. child executes as the sole thread in parent's address space. parents block until child call exec() or exit.

    * exec(): load new executable into the address space and begin executing

13. Threads Implementation
* Threads is merely a process that shares certain resources with other processes. 
* Every thread has unique task_struct and appears to the kernel as normal process.
* follow clone() flags for fork thread. clone(CLONE_VM| CLONE_FS| CLONE_FILES | CLONE_SIGHAND, 0);
* flags mean share address space, filesystem resources, file descriptors, and signal handlers.
 ** normal process fork: clone(SIGCHLD,0);
 ** vfork is implemented: clone(CLONE_VFORK | CLONE_VM | SIGCHLD, 0);
* flags for clone are defined in <linux/sched.h>

14. Kernel Threads:
* Normal processes that exist solely in kernel space.
* no address space (mm ptr is null)
* operate only in kernel-space
* do not context-switch to user-space.
* schedulable and preemptable as normal processes.
* kernel thread can only create by kernel thread.
* int kernel_thread(int (*fn)(void*), void* arg, unsigned long flags) calls clone with specific flag. child will run fn with arg. parent kernel thread exist with a pointer to child's task_struct.

15. Process Termination.
* when exit() is called.
* call do_exit()
* when finish , thread in TASK_ZOMBIE state. (memory occupies:  kernel stack, thread_info, task_struct) 
* this allow system to obtain info about a child process after it terminated.
* after parent call wait() family func, child's task_struct will be deallocated. 
* wait4() suspend the calling task until its children exits. the func at that time will return PID of the exited task.
* when thread exit, it's children are reparent to the thread in same group. or init.
* when a task is ptraced, it is temporarily reparented to debugging process.

